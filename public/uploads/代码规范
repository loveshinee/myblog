## 概述
本文简单叙述在前端开发中应当注意的一些代码规范

## 基本格式化
1. 缩进层级  
	推荐使用4个空格字符为一个缩进层级
	
2. 语句结尾  
	推荐总是使用分号
	
3. 行的长度  
	一行代码限定80个字符
	
4. 换行  
	在运算符后换行，第二行追加两个缩进。例外情况：当给变量赋值时，第二行的位置应当和赋值运算符的位置保持对齐。
	
5. 空行  
	* 在方法之间空行
	* 在方法中的局部变量和第一条语句之间空行
	* 在多行的单行注释之间空行
	* 在方法内的逻辑片段之间插入空行，提高可读性
	
6. 命名  
	* 变量和函数  
	变量名应当总是遵守驼峰大小写命名法，并且命名前缀应当时名词。而函数命名前缀应当时动词。命名应当尽可能短，并抓住要点。
	* 常量  
	ES6之前，JS并没有真正的常量的概念，为了区分常量和变量，约定使用大写字母和下划线来定义常量，下划线用来分割单词。 
	 
		>    var MAX_COUNT = 10;
	
	* 构造函数  
	构造函数的命名遵照大驼峰命名法  
	
		>   function Person(){}
		
7. 直接量
	* 字符串  
	可以用双引号、也可以用单引号，除了内部出现字符串界定符需要转义以外，两种做法完全一致。  

	* 数字

	   ```  
		// 整数  
			var count = 10;  
		// 小数  
			var price = 10.0;  
		```  

	* 数组  
		不赞成显式使用Array构造函数来创建数组  

		```  
		// 好的做法：  
		var color = ["red", "blue", "green"];  
		```  

	* 对象直接量  
		在直接量中写出所有属性  

		```
		 var book = {
		 	title  : "a book",  
			author : "someone"  
		};
		```  

		
## 注释  
1. 单行注释  

	以双斜线开始，以行尾结束  
	> 这是一句单行注释  
	
	* 独占一行的注释。这行注释之前总会有一行空行，且缩紧层级和下一行代码保持一致
	* 在代码行尾注释。代码和注释之间通常有一个缩紧。并且不应超过单行最大字符限制。
	* 被注释掉的大段代码

2. 多行注释  
	
	多行注释可以包裹跨行文本；注释之前也有一行空行、缩进层级和其描述的代码保持一致；星号后带空格。  

3. 使用注释  
	
	添加注释的一般原则是，在需要让代码变得更清晰时添加注释  
	
	* 难以理解的代码
	* 可能被误认为错误的代码
	* 浏览器特性hack  
	
4. 文档注释  
	
	文档注释以单斜线加双星号开始（／** ）  
	  
	    
	    
## 语句和表达式
  
1. 花括号的对齐方式  

	推荐将左花括号放置在块语句第一句代码的末尾  

	```
		if (condition) {
			//doSomething
		}
	```
	
2. 块语句间隔  
	
	推荐在左圆括号之前和右圆括号之后各添加一个空格  
	
	
## 变量、函数和运算符  

1. 变量的声明  
	
	建议总是将局部变量的定义作为函数内第一条语句。并推荐合并var语句  
	
	```
	function aFunction(){  
		var i,  
			len,
			value = 10;
		
		//doSomeThing
	}
	```
	
2. 函数声明  
	
	推荐先声明函数然后再去使用；且，函数声明不应该出现在语句块之内。  

3. 函数调用间隔  

	函数调用写法推荐：在函数名和左括号之间没有空格。这么做为了区分块语法。  
	
4. 立即调用函数   
	
	为了让立即执行函数能够被一眼看出来，可以将函数用一对圆括号包裹
	
	```
	var value = (function () {
		//函数体
		
		return	{
		
		}
	})();
	```

5. 相等  
	由于JS具有强制类型转换机制，因此不推荐使用 == 和 !=,推荐使用 === 和 !==  
	
## UI的松耦合
		
1. 松耦合的概念  
	
	当能做到修改一个组件而不需要更改其他的组件时，你就做到了松耦合。  

2. 将JS代码从CSS中抽离  
	
	避免在JS代码中使用CSS表达式： 1）影响性能 2）难易维护  

3. 将CSS从JS中抽离
	
	避免直接修改DOM元素的style属性。当需要通过JS来修改元素样式的时候，最佳方法是操作CSS的className。只有在给页面中的元素做定位时候，可以接受使用style属性。  
	
4. 将JS代码冲HTML中抽离  
	
	最好将JS代码都放入外置文件  

5. 将HTML从JS中抽离  
	
	将HTML代码嵌入JS是非常不好的实践 1）增加了跟踪文本的河结构性问题的复杂度。2）可维护性差  

## 避免使用全局变量  

1. 全局变量带来的问题  
	* 命名冲突  
	* 代码脆弱
	* 难以测试  
	
2. 意外的全局变量  
	
	不要省略var来定义全局变量  
	
3. 单全局变量方式  

	* 命名空间 基于单全局变量扩充  
	* 模块  
	
4. 零全局变量  
	
	实现方法：使用一个立即执行的函数调用并将所有脚本放置其中  
	
	```
		(function(){
			//doSomeThing
		})();
	```  


## 将配置数据从代码中分离出来  

1. 什么是配置数据  
	配置数据是应用中写死的值。例如：  
	* URL  
	* 需要展现给用户的字符串
	* 重复的值
	* 设置（比如每页的配置项）
	* 任何可能发生变化的值  

2. 抽离配置数据  
	
	将配置数据从代码中抽离出来的第一步是将配置数据拿到外部，即将数据从javascript代码之中拿掉。  

3. 保存配置数据  

	配置数据最好放在单独的文件中，以便清晰的分割数据和应用逻辑。 